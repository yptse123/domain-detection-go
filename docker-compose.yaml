services:
  app:
    build:
      context: .
    container_name: domain-detection-api
    # restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - UPTRENDS_API_KEY=${UPTRENDS_API_KEY}
      - UPTRENDS_USERNAME=${UPTRENDS_USERNAME}
      - UPTRENDS_API_URL=${UPTRENDS_API_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SITE24X7_CLIENT_ID=${SITE24X7_CLIENT_ID}
      - SITE24X7_CLIENT_SECRET=${SITE24X7_CLIENT_SECRET}
      - SITE24X7_REFRESH_TOKEN=${SITE24X7_REFRESH_TOKEN}
    depends_on:
      migrations:
        condition: service_completed_successfully
    networks:
      - domain-detection-network

  db:
    image: postgres:16-alpine
    container_name: domain-detection-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - domain-detection-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    image: migrate/migrate:v4.16.2
    container_name: domain-detection-migrations
    volumes:
      - ./migrations:/migrations
    depends_on:
      db:
        condition: service_healthy
    networks:
      - domain-detection-network
    command: ["-path", "/migrations", "-database", "${DATABASE_URL}", "up"]
    # docker-compose run --rm migrations

networks:
  domain-detection-network:
    driver: bridge

volumes:
  postgres_data: